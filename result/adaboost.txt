AdaBoost with GraphSAGE:

n_estimators=100
python src/main.py -v train -m adaboost -c .cache/sage.out --max-iteration=20 -t1
(info) roc = [0.5878, 0.9274, 0.9556, 0.5278, 0.9231, 0.7845, 0.5274, 0.1063, 0.9036, 0.7789]
(info) prc = [0.0915, 0.8934, 0.7727, 0.2664, 0.5242, 0.3724, 0.0154, 0.0027, 0.5474, 0.0556]
(info) All folds: ROC-AUC = 0.702±0.268, PRC-AUC = 0.354±0.323

python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j5 -sp fork
(info) roc = [0.9054, 0.4724, 0.835, 0.5619, 0.8401, 0.8013, 0.2673, 0.9734, 0.1401, 0.7018]
(info) prc = [0.5786, 0.2432, 0.4677, 0.2664, 0.2395, 0.3682, 0.0091, 0.5358, 0.0028, 0.0247]
(info) All folds: ROC-AUC = 0.650±0.281, PRC-AUC = 0.274±0.215

python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j5 -sp fork --no-shortcut
(info) roc = [0.6932, 0.6776, 0.9, 0.6231, 0.8338, 0.6919, 0.4608, 0.1981, 0.8566, 0.6533]
(info) prc = [0.277, 0.2579, 0.5782, 0.3054, 0.5893, 0.1126, 0.019, 0.003, 0.421, 0.3461]
(info) All folds: ROC-AUC = 0.659±0.206, PRC-AUC = 0.291±0.206

python src/main.py -v train -m adaboost -c .cache/sage.out --max-iteration=20 -t1 -j10 -sp fork -s f_score
(info) roc = [0.9162, 0.8673, 0.6482, 0.6402, 0.0773, 0.8896, 0.9784, 0.9707, 0.6852, 0.4407]
(info) prc = [0.7037, 0.293, 0.07, 0.0606, 0.0026, 0.2937, 0.5095, 0.7645, 0.3471, 0.0132]
(info) All folds: ROC-AUC = 0.711±0.283, PRC-AUC = 0.306±0.280

python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score
(info) roc = [0.6229, 0.8997, 0.9761, 0.8236, 0.0338, 0.5347, 0.9848, 0.6248, 0.6143, 0.3826]
(info) prc = [0.3482, 0.5737, 0.5872, 0.5791, 0.0025, 0.0198, 0.5392, 0.095, 0.2818, 0.261]
(info) All folds: ROC-AUC = 0.650±0.294, PRC-AUC = 0.329±0.235

python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score --no-shortcut
(info) roc = [0.558, 0.6432, 0.771, 0.4785, 0.5684, 0.9607, 0.6643, 0.8389, 0.8778, 0.7805]
(info) prc = [0.0054, 0.1118, 0.3532, 0.263, 0.0204, 0.7753, 0.2975, 0.4333, 0.7162, 0.755]
(info) All folds: ROC-AUC = 0.714±0.156, PRC-AUC = 0.373±0.293

看上去 AdaBoost 给出的概率都在 0.5 附近。
https://scikit-learn.org/stable/modules/calibration.html#calibration
http://www.cs.cornell.edu/~caruana/niculescu.scldbst.crc.rev4.pdf
https://www.ijcai.org/Proceedings/13/Papers/286.pdf

# 直接预测标签
python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score
(info) roc = [0.6974, 0.6225, 0.7475, 0.5, 0.6641, 0.4982, 0.625, 0.4976, 0.75, 0.6759]
(info) prc = [0.5408, 0.3825, 0.5883, 0.5074, 0.4216, 0.0072, 0.6324, 0.0024, 0.7575, 0.6175]
(info) All folds: ROC-AUC = 0.628±0.099, PRC-AUC = 0.446±0.256

(info) roc = [0.6225, 0.6642, 0.5949, 0.8725, 0.7397, 0.6641, 0.4964, 0.7424, 0.7857, 0.4976]
(info) prc = [0.3824, 0.4216, 0.2766, 0.7525, 0.4717, 0.4216, 0.0072, 0.455, 0.8006, 0.0024]
(info) All folds: ROC-AUC = 0.668±0.121, PRC-AUC = 0.399±0.263

(info) roc = [0.4964, 0.625, 0.6759, 0.6591, 0.7475, 0.8256, 0.6667, 0.4831, 0.5974, 0.8725]
(info) prc = [0.0072, 0.6324, 0.6175, 0.2966, 0.5883, 0.624, 0.6716, 0.0024, 0.36, 0.7525]
(info) All folds: ROC-AUC = 0.665±0.126, PRC-AUC = 0.455±0.275

(info) roc = [0.4899, 0.7116, 0.5898, 0.6225, 0.6225, 0.4975, 0.7475, 0.4879, 0.4982, 0.7372]
(info) prc = [0.0075, 0.6627, 0.21, 0.3825, 0.3824, 0.0074, 0.5883, 0.0024, 0.0072, 0.445]
(info) All folds: ROC-AUC = 0.600±0.105, PRC-AUC = 0.270±0.257

(info) roc = [0.5974, 0.6616, 0.6566, 0.4831, 0.4975, 0.5, 0.6071, 0.625, 0.75, 0.6667]
(info) prc = [0.36, 0.3383, 0.2716, 0.0024, 0.0099, 0.5072, 0.6344, 0.6325, 0.755, 0.6766]
(info) All folds: ROC-AUC = 0.605±0.087, PRC-AUC = 0.419±0.269

(info) roc = [0.6667, 0.6759, 0.7423, 0.6225, 0.6667, 0.7449, 0.4952, 0.4927, 0.6949, 0.7449]
(info) prc = [0.6716, 0.6175, 0.5075, 0.3824, 0.6716, 0.505, 0.0024, 0.0072, 0.4575, 0.505]
(info) All folds: ROC-AUC = 0.655±0.094, PRC-AUC = 0.433±0.244

python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score --no-shortcut
(info) roc = [0.4872, 0.6616, 0.625, 0.75, 0.4686, 0.6375, 0.5949, 0.6616, 0.625, 0.7474]
(info) prc = [0.0072, 0.3383, 0.6324, 0.755, 0.0024, 0.5009, 0.2766, 0.3383, 0.6325, 0.6325]
(info) All folds: ROC-AUC = 0.626±0.093, PRC-AUC = 0.412±0.265

n_estimators=50
python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score
(info) roc = [0.4945, 0.6949, 0.4924, 0.6616, 0.7346, 0.6429, 0.7449, 0.5, 0.8674, 0.4975]
(info) prc = [0.0072, 0.4575, 0.0075, 0.3383, 0.4241, 0.6676, 0.505, 0.5024, 0.6275, 0.0099]
(info) All folds: ROC-AUC = 0.633±0.132, PRC-AUC = 0.355±0.257

(info) roc = [0.5, 0.4982, 0.6566, 0.5992, 0.6225, 0.6974, 0.6667, 0.6225, 0.6642, 0.7475]
(info) prc = [0.5024, 0.0072, 0.2716, 0.3844, 0.3824, 0.5408, 0.6766, 0.3825, 0.4216, 0.5883]
(info) All folds: ROC-AUC = 0.627±0.079, PRC-AUC = 0.416±0.186

# n_estimators=150
python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score
(info) roc = [0.4976, 0.4909, 0.4949, 0.7475, 0.5949, 0.75, 0.625, 0.8256, 0.6733, 0.495]
(info) prc = [0.0024, 0.0072, 0.0075, 0.5883, 0.2766, 0.755, 0.6324, 0.624, 0.558, 0.0074]
(info) All folds: ROC-AUC = 0.619±0.126, PRC-AUC = 0.346±0.316

(info) roc = [0.495, 0.6566, 0.6923, 0.5, 0.4964, 0.8725, 0.7423, 0.709, 0.5, 0.6225]
(info) prc = [0.0074, 0.2716, 0.4075, 0.5099, 0.0072, 0.7525, 0.5075, 0.6091, 0.5024, 0.3825]
(info) All folds: ROC-AUC = 0.629±0.130, PRC-AUC = 0.396±0.242

# n_estimators=100 again
python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score
(info) roc = [0.6667, 0.4982, 0.6375, 0.4975, 0.8128, 0.5, 0.5, 0.5974, 0.8648, 0.7475]
(info) prc = [0.6716, 0.0072, 0.5009, 0.0074, 0.505, 0.5024, 0.5099, 0.36, 0.5918, 0.5883]
(info) All folds: ROC-AUC = 0.632±0.139, PRC-AUC = 0.424±0.234

+ `--train-validate`
python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score --train-validate
(info) roc = [0.4945, 0.8205, 0.6225, 0.495, 0.7475, 0.5923, 0.6402, 0.6225, 0.5, 0.6616]
(info) prc = [0.0072, 0.5605, 0.3824, 0.0074, 0.5883, 0.235, 0.5676, 0.3825, 0.5024, 0.3383]
(info) All folds: ROC-AUC = 0.620±0.108, PRC-AUC = 0.357±0.216

python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score --max-iteration=30
(info) roc = [0.6641, 0.6199, 0.5949, 0.7475, 0.5, 0.4928, 0.9064, 0.6642, 0.7475, 0.6759]
(info) prc = [0.4216, 0.2991, 0.2766, 0.5883, 0.5072, 0.0024, 0.6969, 0.4216, 0.5883, 0.6175]
(info) All folds: ROC-AUC = 0.661±0.123, PRC-AUC = 0.442±0.207

# using StandardScalar:
=99
(info) roc = [0.625, 0.4909, 0.6949, 0.6566, 0.5, 0.7475, 0.6402, 0.6642, 0.8256, 0.6199]
(info) prc = [0.6325, 0.0072, 0.4575, 0.2716, 0.5024, 0.5883, 0.5676, 0.4216, 0.624, 0.2991]
(info) All folds: ROC-AUC = 0.646±0.101, PRC-AUC = 0.437±0.197

(info) roc = [0.4949, 0.75, 0.6898, 0.5, 0.8725, 0.8308, 0.709, 0.625, 0.4975, 0.4952]
(info) prc = [0.0075, 0.755, 0.3741, 0.5072, 0.7525, 0.7383, 0.6091, 0.6324, 0.0074, 0.0024]
(info) All folds: ROC-AUC = 0.646±0.146, PRC-AUC = 0.439±0.321

python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score --max-iteration=30 --train-validate
(info) roc = [0.5, 0.5, 0.5974, 0.75, 0.5, 0.6225, 0.6591, 0.6759, 0.8333, 0.625]
(info) prc = [0.5024, 0.5072, 0.36, 0.755, 0.5074, 0.3825, 0.2966, 0.6175, 0.8383, 0.6324]
(info) All folds: ROC-AUC = 0.626±0.111, PRC-AUC = 0.540±0.173

(info) roc = [0.4964, 0.6429, 0.4925, 0.5, 0.5949, 0.4975, 0.6566, 0.625, 0.7449, 0.6199]
(info) prc = [0.0072, 0.6676, 0.0074, 0.5024, 0.2766, 0.01, 0.2716, 0.6325, 0.5575, 0.2991]
(info) All folds: ROC-AUC = 0.587±0.087, PRC-AUC = 0.323±0.259

python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s roc_auc --max-iteration=30 --train-validate
(info) roc = [0.7116, 0.8256, 0.5, 0.625, 0.5, 0.4975, 0.75, 0.5949, 0.625, 0.6641]
(info) prc = [0.6627, 0.624, 0.5072, 0.6324, 0.5024, 0.0074, 0.755, 0.2766, 0.6325, 0.4216]
(info) All folds: ROC-AUC = 0.629±0.112, PRC-AUC = 0.502±0.221

(info) roc = [0.495, 0.7116, 0.4964, 0.8205, 0.4976, 0.5949, 0.7475, 0.6641, 0.7475, 0.625]
(info) prc = [0.0074, 0.6627, 0.0072, 0.5605, 0.0024, 0.2766, 0.5883, 0.4216, 0.5883, 0.6324]
(info) All folds: ROC-AUC = 0.640±0.118, PRC-AUC = 0.375±0.278

# using CalibratedClassifierCV
python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s roc_auc --max-iteration=30
(info) roc = [0.6806, 0.7487, 0.8464, 0.7357, 0.9563, 0.572, 0.9683, 0.8726, 0.2415, 0.6022]
(info) prc = [0.3031, 0.0841, 0.4442, 0.3515, 0.8637, 0.2663, 0.4177, 0.253, 0.0032, 0.0251]
(info) All folds: ROC-AUC = 0.722±0.217, PRC-AUC = 0.301±0.251

(info) roc = [0.4265, 0.6498, 0.9157, 0.9581, 0.9479, 0.9695, 0.5, 0.1111, 0.7035, 0.3595]
(info) prc = [0.3276, 0.0965, 0.6491, 0.5071, 0.5522, 0.71, 0.0765, 0.0027, 0.3487, 0.0104]
(info) All folds: ROC-AUC = 0.654±0.299, PRC-AUC = 0.328±0.270

(info) roc = [0.8047, 0.8655, 0.809, 0.8832, 0.9183, 0.9103, 0.6704, 0.0386, 0.5682, 0.5]
(info) prc = [0.3558, 0.5415, 0.3574, 0.3158, 0.662, 0.5221, 0.2482, 0.0025, 0.2665, 0.014]
(info) All folds: ROC-AUC = 0.697±0.273, PRC-AUC = 0.329±0.214

python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score --max-iteration=30
(info) roc = [0.8122, 0.7778, 0.8995, 0.9436, 0.986, 0.5541, 0.1594, 0.4811, 0.9058, 0.5867]
(info) prc = [0.7558, 0.3527, 0.4004, 0.6592, 0.6426, 0.3314, 0.0029, 0.2631, 0.7127, 0.0174]
(info) All folds: ROC-AUC = 0.711±0.261, PRC-AUC = 0.414±0.275

(info) roc = [0.9556, 0.803, 0.967, 0.7873, 0.9085, 0.8173, 0.5139, 0.9168, 0.1353, 0.4133]
(info) prc = [0.3789, 0.1661, 0.7077, 0.1176, 0.4912, 0.3788, 0.2648, 0.6653, 0.0028, 0.0112]
(info) All folds: ROC-AUC = 0.722±0.277, PRC-AUC = 0.318±0.252

(info) roc = [0.6102, 0.8906, 0.8233, 0.8641, 0.7521, 0.9797, 0.4268, 0.9086, 0.1401, 0.4489]
(info) prc = [0.2473, 0.4353, 0.5082, 0.6712, 0.1019, 0.5385, 0.2626, 0.7616, 0.0028, 0.0142]
(info) All folds: ROC-AUC = 0.684±0.271, PRC-AUC = 0.354±0.269

# 样本权重
正例 30，负例 1
python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score --max-iteration=30
(info) roc = [0.7963, 0.9221, 0.5704, 0.8997, 0.986, 0.9514, 0.9205, 0.7008, 0.3237, 0.3786]
(info) prc = [0.3836, 0.6565, 0.333, 0.3964, 0.5913, 0.4251, 0.7417, 0.2726, 0.0035, 0.0107]
(info) All folds: ROC-AUC = 0.745±0.244, PRC-AUC = 0.381±0.246

(info) roc = [0.734, 0.5255, 0.9556, 0.7868, 0.1401, 0.9009, 0.7839, 0.9324, 0.6944, 0.5255]
(info) prc = [0.1007, 0.4131, 0.3943, 0.6822, 0.0028, 0.4064, 0.0413, 0.7787, 0.0886, 0.0144]
(info) All folds: ROC-AUC = 0.698±0.247, PRC-AUC = 0.292±0.285

(info) roc = [0.9518, 0.9222, 0.9229, 0.9045, 0.548, 0.6388, 0.7593, 0.0676, 0.9759, 0.4662]
(info) prc = [0.6987, 0.587, 0.5225, 0.1434, 0.2664, 0.3338, 0.1136, 0.0026, 0.4872, 0.0125]
(info) All folds: ROC-AUC = 0.716±0.291, PRC-AUC = 0.317±0.248

正例 #zero，负例 #one
命令行同上
(info) roc = [0.7265, 0.9358, 0.8721, 0.9695, 0.8995, 0.912, 0.6288, 0.9505, 0.1739, 0.4033]
(info) prc = [0.293, 0.5595, 0.3686, 0.6071, 0.0958, 0.474, 0.2685, 0.4511, 0.0029, 0.024]
(info) All folds: ROC-AUC = 0.747±0.269, PRC-AUC = 0.314±0.217

(info) roc = [0.8114, 0.9898, 0.4987, 0.7454, 0.5949, 0.9316, 0.9103, 0.8515, 0.1691, 0.4243]
(info) prc = [0.5351, 0.76, 0.2643, 0.1545, 0.3344, 0.8192, 0.6258, 0.7573, 0.0029, 0.0187]
(info) All folds: ROC-AUC = 0.693±0.264, PRC-AUC = 0.427±0.313

(info) roc = [0.6835, 0.4066, 0.912, 0.0725, 0.8185, 0.5265, 0.6683, 0.9301, 0.9898, 0.5128]
(info) prc = [0.3471, 0.2615, 0.6653, 0.0026, 0.4562, 0.2339, 0.0251, 0.7614, 0.6077, 0.0519]
(info) All folds: ROC-AUC = 0.652±0.283, PRC-AUC = 0.341±0.275

(info) roc = [0.9426, 0.849, 0.9665, 0.8687, 0.6061, 0.9442, 0.3092, 0.6327, 0.9248, 0.5082]
(info) prc = [0.6587, 0.5407, 0.1742, 0.3967, 0.2708, 0.4872, 0.0035, 0.336, 0.6721, 0.0176]
(info) All folds: ROC-AUC = 0.755±0.227, PRC-AUC = 0.356±0.241

(info) roc = [0.8451, 0.5972, 0.8477, 0.9416, 0.8385, 0.8613, 0.0145, 0.8074, 0.4867, 0.3859]
(info) prc = [0.3828, 0.27, 0.6447, 0.3669, 0.5513, 0.5483, 0.0024, 0.068, 0.3288, 0.0195]
(info) All folds: ROC-AUC = 0.663±0.292, PRC-AUC = 0.318±0.230

(info) roc = [0.8718, 0.5918, 0.9445, 0.8827, 0.8316, 0.3285, 0.9504, 0.9898, 0.625, 0.4042]
(info) prc = [0.7584, 0.332, 0.7319, 0.3688, 0.3892, 0.0036, 0.7166, 0.7292, 0.2682, 0.0138]
(info) All folds: ROC-AUC = 0.742±0.238, PRC-AUC = 0.431±0.292

python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score --max-iteration=30 --embedding-dim=32
(info) roc = [0.802, 0.8131, 0.9513, 0.9122, 0.8945, 0.1787, 0.9378, 0.6174, 0.5786, 0.3148]
(info) prc = [0.7555, 0.399, 0.7169, 0.6243, 0.4054, 0.0029, 0.7666, 0.2686, 0.2981, 0.01]
(info) All folds: ROC-AUC = 0.700±0.272, PRC-AUC = 0.425±0.287

(info) roc = [0.7588, 0.7896, 0.9667, 0.529, 0.314, 0.9645, 0.9391, 0.5704, 0.8617, 0.3677]
(info) prc = [0.0565, 0.38, 0.5888, 0.0241, 0.0035, 0.4982, 0.767, 0.3314, 0.5618, 0.0111]
(info) All folds: ROC-AUC = 0.706±0.245, PRC-AUC = 0.322±0.283

python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score --max-iteration=30 --embedding-dim=96
(info) roc = [0.6111, 0.8182, 0.9683, 0.5286, 0.9624, 0.8537, 0.871, 0.9162, 0.3527, 0.4763]
(info) prc = [0.2709, 0.3573, 0.4997, 0.3299, 0.3181, 0.5189, 0.3734, 0.7626, 0.0037, 0.0132]
(info) All folds: ROC-AUC = 0.736±0.223, PRC-AUC = 0.345±0.227

(info) roc = [0.7357, 0.9096, 0.9873, 0.8643, 0.9385, 0.835, 0.5959, 0.285, 0.7614, 0.312]
(info) prc = [0.1005, 0.5419, 0.6163, 0.1332, 0.5406, 0.5151, 0.4164, 0.0034, 0.3019, 0.0105]
(info) All folds: ROC-AUC = 0.722±0.250, PRC-AUC = 0.318±0.239

# using ReLU instead of Tanh
python src/main.py -v train -m adaboost -c .cache/sage.out -t1 -j10 -sp fork -s f_score --max-iteration=30
(info) roc = [0.7593, 0.9619, 0.4858, 0.8235, 0.9176, 0.7881, 0.9222, 0.4348, 0.673, 0.4818]
(info) prc = [0.1136, 0.4126, 0.0137, 0.1777, 0.714, 0.5781, 0.2799, 0.0042, 0.0367, 0.0138]
(info) All folds: ROC-AUC = 0.725±0.197, PRC-AUC = 0.234±0.256

(info) roc = [0.9419, 0.5543, 0.9632, 0.7306, 0.9124, 0.6155, 0.7387, 0.8459, 0.0483, 0.505]
(info) prc = [0.6719, 0.2716, 0.5735, 0.4275, 0.1361, 0.4055, 0.0267, 0.1876, 0.0025, 0.0277]
(info) All folds: ROC-AUC = 0.686±0.276, PRC-AUC = 0.273±0.238


* [ ] `--train-validate`
* [ ] hidden_size=32
* [ ] activate functions
* [ ] weight